!function(t) {
    function e(n) {
        if (u[n]) return u[n].exports;
        var i = u[n] = {
            i: n,
            l: !1,
            exports: {}
        };
        return t[n].call(i.exports, i, i.exports, e), i.l = !0, i.exports;
    }
    var u = {};
    e.m = t, e.c = u, e.d = function(t, u, n) {
        e.o(t, u) || Object.defineProperty(t, u, {
            configurable: !1,
            enumerable: !0,
            get: n
        });
    }, e.r = function(t) {
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
    }, e.n = function(t) {
        var u = t && t.__esModule ? function() {
            return t.default;
        } : function() {
            return t;
        };
        return e.d(u, "a", u), u;
    }, e.o = function(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e);
    }, e.p = "", e(e.s = 39);
}({
    38: function(t, e) {
        t.exports = {
            1044: {
                utm_source: "分享",
                utm_medium: "带shareTicket的小程序消息卡片（详情）"
            },
            1007: {
                utm_source: "分享",
                utm_medium: "单人聊天会话中的小程序消息卡片"
            },
            1008: {
                utm_source: "分享",
                utm_medium: "群聊会话中的小程序消息卡片"
            },
            1036: {
                utm_source: "分享",
                utm_medium: "App分享消息卡片"
            },
            1020: {
                utm_source: "公众号",
                utm_medium: "公众号profile页相关小程序列表"
            },
            1035: {
                utm_source: "公众号",
                utm_medium: "公众号自定义菜单"
            },
            1043: {
                utm_source: "公众号",
                utm_medium: "公众号模板消息"
            },
            1058: {
                utm_source: "公众号",
                utm_medium: "公众号文章"
            },
            1074: {
                utm_source: "公众号会话",
                utm_medium: "公众号会话下发的小程序消息卡片"
            },
            1067: {
                utm_source: "广告",
                utm_medium: "公众号文章广告"
            },
            1068: {
                utm_source: "广告",
                utm_medium: "附近小程序列表广告"
            },
            1073: {
                utm_source: "客服消息",
                utm_medium: "客服消息列表下发的小程序消息卡片"
            },
            1011: {
                utm_source: "扫码",
                utm_medium: "扫描二维码"
            },
            1012: {
                utm_source: "扫码",
                utm_medium: "长按图片识别二维码"
            },
            1013: {
                utm_source: "扫码",
                utm_medium: "手机相册选取二维码"
            },
            1025: {
                utm_source: "扫码",
                utm_medium: "扫描一维码"
            },
            1031: {
                utm_source: "扫码",
                utm_medium: "长按图片识别一维码"
            },
            1032: {
                utm_source: "扫码",
                utm_medium: "手机相册选取一维码"
            },
            1047: {
                utm_source: "扫码",
                utm_medium: "扫描小程序码"
            },
            1048: {
                utm_source: "扫码",
                utm_medium: "长按图片识别小程序码"
            },
            1049: {
                utm_source: "扫码",
                utm_medium: "手机相册选取小程序码"
            },
            1027: {
                utm_source: "搜索",
                utm_medium: "顶部搜索框搜索结果页“使用过的小程序”列表"
            },
            1005: {
                utm_source: "搜索",
                utm_medium: "顶部搜索框的搜索结果页"
            },
            1006: {
                utm_source: "搜索",
                utm_medium: "发现栏小程序主入口搜索框的搜索结果页"
            },
            1042: {
                utm_source: "搜索",
                utm_medium: "添加好友搜索框的搜索结果页"
            },
            1053: {
                utm_source: "搜索",
                utm_medium: "搜一搜的结果页"
            },
            1054: {
                utm_source: "搜索",
                utm_medium: "顶部搜索框小程序快捷入口"
            },
            1064: {
                utm_source: "微信WIFI",
                utm_medium: "微信连Wi-Fi状态栏"
            },
            1078: {
                utm_source: "微信WIFI",
                utm_medium: "连Wi-Fi成功页"
            },
            1028: {
                utm_source: "微信卡券",
                utm_medium: "我的卡包"
            },
            1029: {
                utm_source: "微信卡券",
                utm_medium: "卡券详情页"
            },
            1052: {
                utm_source: "微信卡券",
                utm_medium: "卡券的适用门店列表"
            },
            1019: {
                utm_source: "微信支付",
                utm_medium: "微信钱包"
            },
            1034: {
                utm_source: "微信支付",
                utm_medium: "微信支付完成页"
            },
            1057: {
                utm_source: "微信支付",
                utm_medium: "钱包中的银行卡详情页"
            },
            1071: {
                utm_source: "微信支付",
                utm_medium: "钱包中的银行卡列表页"
            },
            1072: {
                utm_source: "微信支付",
                utm_medium: "二维码收款页面"
            },
            1001: {
                utm_source: "微信主程序",
                utm_medium: "发现栏小程序主入口"
            },
            1022: {
                utm_source: "微信主程序",
                utm_medium: "聊天顶部置顶小程序入口"
            },
            1024: {
                utm_source: "微信主程序",
                utm_medium: "小程序 profile 页"
            },
            1089: {
                utm_source: "微信主程序",
                utm_medium: "微信聊天主界面下拉"
            },
            1026: {
                utm_source: "微信主程序",
                utm_medium: "附近小程序列表"
            },
            1037: {
                utm_source: "小程序",
                utm_medium: "小程序打开小程序"
            },
            1038: {
                utm_source: "小程序",
                utm_medium: "从另一个小程序返回"
            },
            1090: {
                utm_source: "小程序",
                utm_medium: "长按小程序右上角菜单唤出最近使用历史"
            },
            1014: {
                utm_source: "小程序模板消息",
                utm_medium: "小程序模板消息"
            },
            1039: {
                utm_source: "摇电视",
                utm_medium: "摇电视"
            },
            1056: {
                utm_source: "音乐播放器菜单",
                utm_medium: "音乐播放器菜单"
            },
            1023: {
                utm_source: "桌面图标",
                utm_medium: "安卓系统桌面图标"
            },
            1017: {
                utm_source: "体验版",
                utm_medium: "前往体验版的入口页"
            },
            1030: {
                utm_source: "测试",
                utm_medium: "自动化测试下打开小程序"
            },
            1059: {
                utm_source: "体验版",
                utm_medium: "体验版小程序绑定邀请页"
            },
            1092: {
                utm_source: "微信城市服务",
                utm_medium: "城市服务入口"
            },
            isShare: function(t) {
                return -1 !== [ 1020, 1035, 1036, 1037, 1038, 1043 ].indexOf(t);
            }
        };
    },
    39: function(t, e, u) {
        function n(t, e, u) {
            if (t[e]) {
                var n = t[e];
                t[e] = function() {
                    n.apply(this, arguments), u.apply(this, arguments);
                };
            } else t[e] = u;
        }
        function i(t, e) {
            var u = t || {}, n = e || {};
            return [ "utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term" ].forEach(function(t) {
                u[t] ? n["$" + t] = u[t] : u["$" + t] && (n["$" + t] = u["$" + t]);
            }), n;
        }
        var r, o, s, m, c, a, _ = {}, d = u(38);
        r = Array.prototype, o = Object.prototype, s = r.slice, m = o.hasOwnProperty, c = r.forEach, 
        a = {}, _.uuid = function() {
            function t() {
                return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
            }
            return t() + t() + "-" + t() + "-" + t() + "-" + t() + "-" + t() + t() + t();
        }, _.each = function(t, e, u) {
            if (null != t) if (c && t.forEach === c) t.forEach(e, u); else if (t.length === +t.length) {
                for (var n = 0, i = t.length; n < i; n++) if (n in t && e.call(u, t[n], n, t) === a) return;
            } else for (var r in t) if (m.call(t, r) && e.call(u, t[r], r, t) === a) return;
        }, _.extend = function(t) {
            return _.each(s.call(arguments, 1), function(e) {
                for (var u in e) void 0 !== e[u] && (t[u] = e[u]);
            }), t;
        }, _.isUndefined = function(t) {
            return void 0 === t;
        }, _.isString = function(t) {
            return "[object String]" == Object.prototype.toString.call(t);
        }, _.isArray = function(t) {
            return "[object Array]" === Object.prototype.toString.call(t);
        }, _.isFunction = function(t) {
            try {
                return /^\s*\bfunction\b/.test(t);
            } catch (t) {
                return !1;
            }
        }, _.isObject = function(t) {
            return t === Object(t) && !_.isArray(t);
        }, _.getSystemInfo = function() {
            var t = wx.getSystemInfoSync();
            return t.resolution = t.windowWidth + "x" + t.windowHeight, t;
        }, _.encode = function(t) {
            var e = {};
            for (var u in t) e["_" + u] = t[u];
            return e;
        }, _.getNet = function(t) {
            wx.getNetworkType({
                complete: function(e) {
                    var u = "wifi" === e.networkType ? 1 : 0, n = "wifi" === e.networkType ? 0 : {
                        "2g": 1,
                        "3g": 3,
                        "4g": 13
                    }[e.networkType];
                    p.set("net", u), p.set("mnet", n), t && t({
                        net: u,
                        mnet: n
                    });
                }
            });
        };
        var p = {
            key: "zg",
            get: function(t) {
                var e = this.getAll();
                return e ? e[t] : null;
            },
            set: function(t, e) {
                var u = this.getAll();
                u[t] = e, wx.setStorageSync(this.key, u);
            },
            setUtm: function(t) {
                wx.setStorageSync("utm", t);
            },
            getUtm: function() {
                return wx.getStorageSync("utm");
            },
            del: function(t) {
                var e = this.getAll();
                delete e[t], wx.setStorageSync(this.key, e);
            },
            getAll: function() {
                var t = wx.getStorageSync(this.key);
                return t || (t = {
                    cache: [],
                    ec: 0,
                    net: 0,
                    mnet: 0
                }, wx.setStorageSync(this.key, t)), t;
            },
            clear: function() {
                wx.removeStorageSync(this.key);
            },
            getDid: function() {
                return wx.getStorageSync("zg-did");
            },
            registerDid: function(t) {
                wx.setStorageSync("zg-did", t || _.uuid());
            },
            updateSession: function(t, e, u) {
                var n = wx.getStorageSync("zg-session");
                n ? (n.sid = t, n.active = e) : n = {
                    sid: t,
                    active: e
                }, console.log(u + "set session info is " + JSON.stringify(n)), wx.setStorageSync("zg-session", n);
            },
            getSessionInfo: function() {
                return wx.getStorageSync("zg-session");
            },
            flush: function() {
                for (var t = this.get("sid"), e = this.get("cache"), u = 0, n = e.length; u < n; u++) {
                    var i = e[u];
                    i.hasOwnProperty("sid") || (i.sid = t);
                }
                return this.set("cache", []), e;
            }
        }, f = function() {
            this._props = {
                appKey: "",
                br: "wx-app",
                an: "",
                vn: "",
                cn: ""
            }, this._url = {
                normal: "https://u.zhugeapi.com/web_event",
                bac: "https://ubak.zhugeio.com/web_event"
            }, this._config = {
                debug: !1,
                did: "",
                an: "wxApp",
                vn: "1.0",
                pv: !1
            }, this._sdk = "web", this._sdkv = "2.1";
        };
        f.prototype._registerOnce = function() {
            p.getDid() || p.registerDid(this._config.did);
        }, f.prototype._sendRequest = function(t) {
            var e = new Date(), u = {
                method: "web_event_srv.upload",
                event: {
                    sln: "itn",
                    pl: "js",
                    sdk: "zg-js",
                    sdkv: this._sdkv,
                    owner: "zg",
                    ut: [ e.getFullYear(), e.getMonth() + 1, e.getDate() ].join("-") + " " + e.toTimeString().match(/\d{2}:\d{2}:\d{2}/)[0],
                    tz: 6e4 * -e.getTimezoneOffset(),
                    debug: this._config.debug ? 1 : 0,
                    ak: this._props.appKey,
                    usr: {
                        did: p.getDid()
                    },
                    data: []
                },
                _: new Date().getTime().toString()
            }, n = p.get("cache");
            p.get("sid") ? (n.length && u.event.data.push(p.flush()), u.event.data.push(t), 
            this._request(u)) : (n.push(t), p.set("cache", n));
        }, f.prototype._request = function(t) {
            var e = this;
            wx.request({
                url: this._url.normal,
                data: t,
                responseType: "arraybuffer",
                fail: function(u) {
                    e._url.normal.toUpperCase() === e._url.bac.toUpperCase() || wx.request({
                        url: e._url.bac,
                        data: t,
                        responseType: "arraybuffer"
                    });
                }
            });
        }, f.prototype._info = function() {
            var t = _.getSystemInfo(), e = new Date(), u = {
                dt: "pl",
                pr: {
                    $rs: t.resolution,
                    $tz: 6e4 * -e.getTimezoneOffset(),
                    $ct: e.getTime(),
                    $cuid: p.get("cuid")
                }
            };
            this._sendRequest(u);
        }, f.prototype._sessionStart = function() {
            var t = new Date(), e = t.getTime(), u = _.getSystemInfo(), n = this;
            p.set("sid", e), p.updateSession(e, e, "会话开始"), _.getNet(function(i) {
                var r = {
                    dt: "ss",
                    pr: {
                        $ct: t.getTime(),
                        $sid: e,
                        $cuid: p.get("cuid"),
                        $cn: n._props.cn,
                        $tz: 6e4 * -t.getTimezoneOffset(),
                        $url: p.get("$url"),
                        $os: u.system.split(/\s/)[0],
                        $ov: u.system.split(/\s/)[1],
                        $wv: u.version,
                        $mnet: i.mnet,
                        $net: i.net,
                        $vn: n._props.vn,
                        $referrer_domain: "miniprogram"
                    }
                };
                r.pr = _.extend(r.pr, p.getUtm()), n._sendRequest(r);
            });
        }, f.prototype._sessionEnd = function() {
            var t = p.get("sid"), e = new Date(), u = e.getTime() - t, n = {
                dt: "se",
                pr: {
                    $ct: e.getTime(),
                    $cn: this._props.cn,
                    $tz: 6e4 * -e.getTimezoneOffset(),
                    $dru: u,
                    $sid: t,
                    $cuid: p.get("cuid"),
                    $referrer_domain: "miniprogram"
                }
            };
            n.pr = _.extend(n.pr, p.getUtm()), this._sendRequest(n), p.clear();
        }, f.prototype._init = function() {
            this._registerOnce(), this._sessionStart(), this._info();
        }, f.prototype.load = function(t, e) {
            this._props.appKey = t, p.set("appKey", t), _.isObject(e) && (this._config = _.extend(this._config, e), 
            this._config.an && (this._props.an = this._config.an), this._config.vn && (this._props.vn = this._config.vn));
        }, f.prototype.identify = function(t, e) {
            var u = p.get("sid"), n = new Date();
            p.set("cuid", t);
            var i = {
                dt: "usr",
                pr: {
                    $ct: n.getTime(),
                    $tz: 6e4 * -n.getTimezoneOffset(),
                    $cuid: t,
                    $sid: u,
                    $url: p.get("$url")
                }
            };
            _.isObject(e) && (i.pr = _.extend(i.pr, _.encode(e))), this._sendRequest(i);
        }, f.prototype.track = function(t, e) {
            t && t.length > 0 ? this.privateTrack(t, e, !0) : console.error("track 事件名称不能为空");
        }, f.prototype.privateTrack = function(t, e, u) {
            var n = p.get("sid"), i = new Date(), r = _.getSystemInfo(), o = u ? "evt" : "abp", s = this;
            u && p.set("ec", p.get("ec") + 1), u && p.updateSession(n, i.getTime(), "标记事件" + o), 
            _.getNet(function(m) {
                var c = {
                    dt: o,
                    pr: {
                        $eid: t,
                        $ct: i.getTime(),
                        $tz: 6e4 * -i.getTimezoneOffset(),
                        $cuid: p.get("cuid"),
                        $cn: s._props.cn,
                        $sid: n,
                        $url: p.get("$url"),
                        $os: r.system.split(/\s/)[0],
                        $ov: r.system.split(/\s/)[1],
                        $wv: r.version,
                        $mnet: m.mnet + "",
                        $referrer_domain: "miniprogram",
                        $net: m.net + "",
                        $vn: s._props.vn
                    }
                };
                c.pr = _.extend(c.pr, p.getUtm()), _.isObject(e) && (c.pr = u ? _.extend(c.pr, _.encode(e)) : _.extend(c.pr, e)), 
                s._sendRequest(c);
            });
        }, f.prototype.start = function() {
            this._init();
        }, f.prototype.end = function() {
            this._sessionEnd();
        };
        var g = new f(), h = function() {}, l = function(t) {
            var e = t.scene, u = e.toString();
            g._props.cn = u;
            var n = void 0, r = void 0, o = d[u];
            d.isShare(e) && (r = t.referrerInfo.appId), o && (n = {
                utm_source: o.utm_source,
                utm_medium: o.utm_medium,
                utm_campaign: r
            });
            var s = i(n), m = i(t.query, s);
            p.setUtm(m);
            var c = p.getSessionInfo();
            if (c && c.hasOwnProperty("active")) {
                var a = new Date().getTime();
                a - c.active > 3e4 ? (g.end(), g.start()) : (p.set("sid", c.sid), p.updateSession(c.sid, a, "进入应用"));
            } else g.start();
        }, v = function() {
            var t = p.get("sid"), e = new Date().getTime();
            p.updateSession(t, e, "应用退出");
        }, y = App;
        App = function(t) {
            n(t, "onLaunch", h), n(t, "onShow", l), n(t, "onHide", v), y(t);
        };
        var w = function(t) {
            var e = Object.keys(t), u = this.__route__, n = this.__route__, i = [];
            if (e && e.length > 0) {
                u += "?";
                for (var r = 0; r < e.length; r++) {
                    var o = e[r];
                    i[r] = o + "=" + t[o];
                }
                u += i.join("&");
            }
            if (p.set("$url", u), g._config.pv) {
                var s = {
                    $page_title: n
                };
                g.privateTrack("pv", s, !1);
            }
        }, S = function() {
            var t = p.get("sid"), e = new Date();
            p.updateSession(t, e.getTime(), "pageShow");
        }, $ = function() {}, x = Page;
        Page = function(t) {
            n(t, "onLoad", w), n(t, "onShow", S), n(t, "onHide", $), x(t);
        }, App.zhuge = g, t.exports = new f();
    }
});